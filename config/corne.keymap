/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define SYMBOL   1
#define NUMPAD   2
#define MOUSE 3
#define GAMING   4

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |       |   Q   |   W   |   F   |  P   |  B  |               |  J  |  L   |  U  |  Y  |  ;  |      |
// |       |   A   |   R   |   S   |  T   |  G  |               |  M  |  N   |  E  |  I  |  O  |      |
// |       | Z*HL2 |   X   | C*ALT |D*CTRL|  V  |               |  K  |H*CTRL|,*ALT|  .  |/*HL4|      |
//                    | L1  | SPC  | SHFT|                           | ENT | Backspace| TAB |
                        bindings = <
   &kp A     &kp Q   &kp W &kp F      &kp P       &kp B          &kp J &kp L  &kp U     &kp Y   &kp SEMI &kp A
   &kp A     &kp A   &kp R &kp S      &kp T       &kp G          &kp M &kp N  &kp E     &kp I   &kp O    &kp A
   &kp A     &lt 2 Z &kp X &mt LALT C &mt LCTRL D &kp V          &kp K &mt LCTRL H  &mt LALT COMMA &kp DOT &lt 3 FSLH &kp A
                  &to 1 &kp SPACE &kp LSHFT                             &kp RET &kp BSPC &kp TAB
                        >;
                };
                
                symbol_layer {
// -----------------------------------------------------------------------------------------
// |       |  !  |  @  |  #  |  $  |  %  |                                  |  (  |  {  |  }  |  )  |  \  |      |
// |       |  ^  |  &  |  *  |  -  |  =  |                                  |  _  |  [  |  ]  |  /  |  '  |      |
// |       |  `  |     |     |     |     |                                  |     |     |  ,  |  .  |  ?  |      |
//                | L0 | Space | Shift |                                       | ENT | Backspace | Tab |
                        bindings = <
   &kp A  &kp EXCL  &kp AT   &kp HASH        &kp DLLR  &kp PRCNT                &kp LPAR  &kp LBRC &kp RBRC  &kp RPAR  &kp BSLH  &kp A
   &kp A  &kp CARET &kp AMPS &kp KP_MULTIPLY &kp MINUS &kp EQUAL                &kp UNDER &kp LBKT &kp RBKT  &kp SLASH &kp SQT   &kp A
   &kp A  &kp GRAVE &trans   &trans          &trans    &trans                   &trans    &trans   &kp COMMA &kp DOT   &kp QMARK &kp A
                         &to 0   &kp SPACE &kp LSHFT                                &kp RET &kp BSPC &kp TAB
                        >;
                };

                numpad_layer {
// -----------------------------------------------------------------------------------------
// |      |numlck|     |     |     |BT Clear|                  |  /  |  #7 |  #8 |  #9 |  *  |      |
// |      | BT1  | BT2 | BT3 | BT4 | BT5    |                  |  -  |  #4 |  #5 |  #6 |  +  |      |
// |      |      |     |     |     |        |                  |  ,  |  #1 |  #2 |  #3 |  .  |      |
//                    | L0 | Space | = |                     | ENT |Backspace| #0 |
                        bindings = <
   &none &kp KP_NUM   &none        &none        &none        &bt BT_CLR      &kp KP_SLASH &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MULTIPLY &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &kp KP_MINUS &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS &none
   &none &none        &none        &none        &none        &none           &kp KP_COMMA &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_DOT &none
                    	     &to 0 &kp SPACE &kp KP_EQUAL                       &kp RET   &kp BSPC    &kp KP_N0
                        >;
                };
                
                mouse_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                
                gaming_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
        };
};
